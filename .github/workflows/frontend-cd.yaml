name: cd-frontend

# Ensure the workflow runs on schedule (Sunday at 0:00) and on push to the main branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - starter/frontend/**
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v3
      # Set up a Node.js environment using the specified node version.
      - name: Set up Node.js 
        uses: actions/setup-node@v3
      - name: Clear caches
        uses: easimon/wipe-cache@main
      # Restore cache
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      # Dependencies
      - name: dependencies
        run: cd starter/frontend && npm ci
      # Run the linter.
      - name: linter
        run: cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v3
      # Set up a Node.js environment using the specified node version.
      - name: Set up Node.js 
        uses: actions/setup-node@v3
      # Restore cache
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      # Install the dependencies.
      - name: dependencies
        run: cd starter/frontend && npm ci
      # Run the tests.
      - name: test
        run: cd starter/frontend/src/ && npm run test

      - name: test fail
        env:
          FAIL_TEST: true
        run: cd starter/frontend/src/  && npm run test
        continue-on-error: true
 
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v3
      # Config aws
      - name: Configure AWS Credentials  
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.REGION }}
      # Log ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build
        uses: docker/build-push-action@v5
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
        with:
          context: starter/frontend/.
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          build-args: |
            REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install
        
      - name: update k8s
        run: aws eks update-kubeconfig --name cluster --region ${{ secrets.REGION }}

      - name: deploy to ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: | 
          cd starter/frontend/k8s
          kustomize edit set image frontend=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          kustomize build | kubectl apply -f -

